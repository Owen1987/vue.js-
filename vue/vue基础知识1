    
            
第一部分：
vue由页面组成
1.页面入口
index.html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>my-project</title>
   
  </head>
  <body>
  	 <!--声明div id=App  留坑-->
    <div id="app"></div>
        
  </body>
</html>

2.程序入口
main.js
//1.引入vue
import Vue from 'vue'
//2.引入App.vue用他的内容来替换 div  id = app
import App from './App'

//import router from './router'
//Vue.config.productionTip = false

/* eslint-disable no-new */
//3.构建实例（总结：一般来说key是固定的，值是自己设置的（可变））
new Vue({
	//挂载目的地
	el:'#app',
	//渲染内容
	render:function (c){return c(App);}
	
})

3.根组件
App.vue
<template>
  <div>...只能有一个根元素div.....</div>
</template>
<script>
</script>
<style>
</style>


指令的练习 ---
App.vue
<!--1模板-->
<template>
	<!--只有一个根节点-->
	<div>
		 <pre>
		 	 指令学习：
		 	 *v-text        *v-html
		 	 *v-if          *v-show
		 	 *v-for         *v-bind 结合class使用
		 	 *v-on    *v-model
		 </pre> 
		   *v-text:只能在双标签中使用
		   <br />
		   <span v-text="text"></span>
		   <input type="text" v-text="text"  value="注意v-text不适用input等单标签"/>
		   <br />
		  *v-html:是元素的innerHTML，不能包含<!--{{xxx}}-->
		  <span  v-html="html"></span>
		  <br />
		  *v-if :控制元素的移除/插入
		  <div v-if="isshow">通过v-if来显示</div>
		  <br />
		  *v-show:控制元素是否显示/隐藏（display）
		  <div v-show="isshow">通过v-show来显示</div>
		  <br/>
		   *v-model:双向数据绑定 
		  <input type="text" v-model="mtext" />
		  {{mtext}}
		  <br/>
		  *v-bind:单向数据
		  <input type="text" v-bind:value="btext" />
		  {{btext}}
		  *v-bind结合class使用
		  <div :class="{'red':isRed}">绑定单个1</div>
		  <div :class="isRed? 'red':'green'">绑定单个2</div>
		  <div :class="{'red':false,'big':true}">绑定多个class</div>
		  <br/>
		  *v-bind结合class使用, 一个学生列表，每个人都有成绩A、 B，成绩匹配显示不同颜色，A-red 
		   B-green复杂情况：通过遍历，用成绩作为Key,取对象的value，最终返回字符串做样式名
		   <ul>
		   	  <li v-for="(stu,index) in stus" :class="{'A':'red','B':'green'}[stu.score]":key="index">
		   	  	{{stu.name}}
		   	  </li>
		   	
		   </ul>
		   <br/>
		   *v-on  *v-model @事件名="表达式||函数名"在template中使用变量或者函数，不需要加this、
		   		  <!-- <button v-on:click="isRed=!isRed">点我变化大</button>-->
		    <button @click="change1">点我变化大method</button>
		    <br/>
		    *v-for 操作数组（item,index）操作对象（value,key,index）
		    key 是类似trank by的一个属性，为的是告诉vue.js中的元素与页面之间的关联，当试图删除元素的时候，是单个元素的删除，而不是整版的替换，设置（必须，性能）
		    2.2.0+的版本里，当组件中使用了v-for，key现在是必须的：key="index"
		    <ul>
		    	<li v-for="(hero,index) in heros" :key="index" :class="{'A':'red','B':'blue','C':'green','D':'pink'}[hero.score]">
		    		{{hero.name}},{{hero.score}}
		    		<button @click="delHero(index)">删除</button>
		    		<button @click="modifyHero(hero)">修改</button>
		    	</li>
		    	
		    </ul>
		    英雄姓名：<input type="text" name="" v-model="name" placeholder="请输入姓名"/><br/>
		   英雄成绩：<input type="text" name=""v-model="score"placeholder="请输入成绩"/>
		    <button @click="addHero">添加英雄</button>
		    <!--<input v-model="aa" v-if="true" />
		    <div v-else="fales">{{aa}}</div>
		    <button @click>修改</button>-->
		    
	</div>
</template>
<!--2.js文件,模块作用域-->
<script>
		export default{
			  //声明组件内函数，在export default这个根属性的上的data是函数，返回一个对象，这个对象的属性是我们初始化的变量的名称
			  data(){
			   		return{
			   			 text:'v-text的内容{{btext}}',
			   			 html:`<div><span>1111<span></div>
			   			 <div><span>2222<span></div>`,
			   			 isshow:false,
			   			 mtext:'',
			   			 btext:'v-bind单向数据',
			   			 isRed:true,
			   			 name:'',
			   			 score:'',
			   			 stus:[{name:'jack',score:'A'},{name:'rose',score:'B'}],
			   		   heros:[{id:1,name:'aaa',score:'A'},{id:2,name:'bbb',score:'B'},
			   		   {id:3,name:'ccc',score:'C'},{id:4,name:'ddd',score:'D'},
			   		   {id:5,name:'eee',score:'A'}],
			   		   aa:"123"
			   		}
			   		 },
			   		 //声明组件内函数，在export default这个根属性的上的methods是属性，其实是一个对象，key是函数名，值是函数体
			   		methods:{
			   		   	//包含多个函数名做KEY，函数体做value，函数没有参数，调用的时候不需要（）
			   		   	change1(){
			   		   		//在script中的能使用对象，基本在template中也能使用，但是
			   		   		//在script中的能使用需要加this而在template中不需要加this
			   		   		this.isRed=!this.isRed;
			   		   		this.stus.push({
			   		   			name:'mick',score:'A'
			   		   		})
			   		   	},
			   		   	addHero(){
			   		   		this.heros.push({
			   		   			name:this.name,
			   		   			score:this.score
			   		   		});
			   		   		//添加后让输入框空白
			   		   		this.name='';
			   		   		this.score='';
			   		   	},
			   		   	delHero(index){//传递的是数组的位置
			   		   		this.heros.splice(index,1);
                
			   		   	},
			   		   	modifyHero(index){
			   		   		console.log(index);
			   		   	}
			   		   }
			 
		}
</script>
<!--3.样式需要设置为本域，不设置则为全局-->
<style>
	.red{
		background-color: red;
	}
	.green{
		background-color: green;
	}
	.big{
		font-weight: bold;
	}
	.blue{
		background-color: blue;
	}
	.pink{
		background-color: pink;
	}
</style>
